capture log close
set matsize 800
set more off
set scheme s1mono
*-----------------------------------------------------------------------------
* hello
*-----------------------------------------------------------------------------

//do load_data
use benchmark.dta, clear

*-----------------------------------------------------------------------------
* parametric variances
*-----------------------------------------------------------------------------

preserve
	scalar sig_a = 0.30259820598356931
	scalar mu_a= 0.82887605607062897

	scalar agrid1=0.5163
	scalar agrid2=0.7921
	scalar agrid3=1.2151
	foreach gen in _k _p _g {
		replace abi`gen' = log(agrid1) if abi`gen'==1
		replace abi`gen' = log(agrid2) if abi`gen'==2
		replace abi`gen' = log(agrid3) if abi`gen'==3
	}

	g ss_4_k1 = log(ss_4_k)
	replace hh_4_k = log(hh_4_k)

	egen shifter = min(ss_4_k)
	replace shifter = -shifter + 1e-16
	replace ss_4_k = log(ss_4_k + shifter)

	egen hmean = mean(hh_4_k)
	egen smean = mean(ss_4_k)
	egen smean1 = mean(ss_4_k1) if !missing(ss_4_k1)

	egen hvar = sd(hh_4_k)
	egen svar = sd(ss_4_k)
	egen svar1 = sd(ss_4_k1) if !missing(ss_4_k1)

	replace hvar = hvar^2
	replace svar = svar^2
	replace svar1 = svar1^2

	log using "param_dist.log", replace
		disp(log(mu_a)-0.5*sig_a^2)
		tab hmean
		tab smean
		tab smean1

		disp(sig_a^2)
		tab hvar
		tab svar
		tab svar1

		correlate abi_k hh_4_k
		correlate abi_k ss_4_k
		correlate hh_4_k ss_4_k

		correlate abi_k ss_4_k1
		correlate hh_4_k ss_4_k1

	log close
restore


*-------------------------------
* variance
*-------------------------------

egen hgcat = cut(hh_4_g_r), at(0,33.33333334,66.66666667,100.00000001)
egen sgcat = cut(ss_4_g_r), at(0,33.33333334,66.66666667,100.00000001)
replace hgcat = int(hgcat)/33+1
replace sgcat = int(sgcat)/33+1

egen hkcat = cut(hh_4_k_r), at(0,33.33333334,66.66666667,100.00000001)
egen skcat = cut(ss_4_k_r), at(0,33.33333334,66.66666667,100.00000001)
replace hkcat = int(hkcat)/33+1
replace skcat = int(skcat)/33+1

egen h5kcat = cut(hh_5_k_r), at(0,33.33333334,66.66666667,100.00000001)
egen s5kcat = cut(ss_5_k_r), at(0,33.33333334,66.66666667,100.00000001)
replace h5kcat = int(h5kcat)/33+1
replace s5kcat = int(s5kcat)/33+1

egen hpcat = cut(hh_4_p_r), at(0,33.33333334,66.66666667,100.00000001)
egen spcat = cut(ss_4_p_r), at(0,33.33333334,66.66666667,100.00000001)
replace hpcat = int(hpcat)/33+1
replace spcat = int(spcat)/33+1

egen h5pcat = cut(hh_5_p_r), at(0,33.33333334,66.66666667,100.00000001)
egen s5pcat = cut(ss_5_p_r), at(0,33.33333334,66.66666667,100.00000001)
replace h5pcat = int(h5pcat)/33+1
replace s5pcat = int(s5pcat)/33+1

*-------------------------------
* PROGRAM THAT COMPUTES CONDVAR
*-------------------------------
cap prog drop condvar
prog def condvar

	if "`1'"=="all" {
		local ownvars col_g abi_g hgcat sgcat
	}
	else if "`1'"=="nocg" {
		local ownvars abi_g hgcat sgcat
	}
	else if "`1'"=="noag" {
		local ownvars col_g hgcat sgcat
	}
	else if "`1'"=="nohg" {
		local ownvars col_g abi_g sgcat
	}
	else if "`1'"=="nosg" {
		local ownvars col_g abi_g hgcat
	}
	if "`2'"=="k5" {
		local parvars col_k abi_k h5kcat s5kcat abi_g
	}
	else if "`2'"=="k4" {
		local parvars col_k abi_k hkcat skcat
	}
	else if "`2'"=="p4" {
		local parvars col_p abi_p hpcat spcat
	}

	preserve
		egen lfamean = mean(lfgavge), by(`ownvars' `parvars')
		egen lfemean = mean(lfgearn), by(`ownvars' `parvars')
		egen lfwmean = mean(lfgwlth), by(`ownvars' `parvars')
//		egen lfumean = mean(lfkutil), by(`ownvars' `parvars')

		replace lfgavge = lfgavge-lfamean
		replace lfgearn = lfgearn-lfemean
		replace lfgwlth = lfgwlth-lfwmean
//		replace lfkutil = lfkutil-lfumean

		egen lfavar = sd(lfgavge)
		egen lfevar = sd(lfgearn)
		egen lfwvar = sd(lfgwlth)
//		egen lfuvar = sd(lfkutil)

		collapse lfavar lfevar lfwvar //lfuvar
		replace lfavar = lfavar^2
		replace lfevar = lfevar^2
		replace lfwvar = lfwvar^2
//		replace lfuvar = lfuvar^2

		log using "lifetime_var.log", append
		disp("`ownvars'")
		disp("`parvars'")
		list
		log close
	restore
end
*-------------------------------
log using "lifetime_var.log", replace
log close

condvar
condvar all
condvar nocg
condvar noag
condvar nohg
condvar nosg

condvar none k5
condvar none k4
condvar none p4

*-----------------------------------------------------------------------------
* decompose h4,s4
*-----------------------------------------------------------------------------
cap prog drop condvarhs
prog def condvarhs

	if "`2'"=="k5" {
		local parvars col_k abi_k h5kcat s5kcat abi_g
	}
	else if "`2'"=="k4" {
		local parvars col_k abi_k hkcat skcat
	}
	else if "`2'"=="p4" {
		local parvars col_p abi_p hpcat spcat
	}
	preserve
		egen `1'mean = mean(`1'), by(`parvars')
		replace `1' = `1'-`1'mean

		egen `1'var = sd(`1')

		collapse `1'var
		replace `1'var = `1'var^2

		log using "hs4_var.log", append
		disp("`1'")
		disp("`parvars'")
		list
		log close
	restore
end

log using "hs4_var.log", replace
log close

condvarhs hh_4_g
condvarhs hh_4_g k5
condvarhs hh_4_g k4
condvarhs hh_4_g p4

condvarhs ss_4_g
condvarhs ss_4_g k5
condvarhs ss_4_g k4
condvarhs ss_4_g p4



*-----------------------------------------------------------------------------
* regressions
*-----------------------------------------------------------------------------
* PROGRAM THAT COMPUTES LIFETIME REGRESSIONS
*-------------------------------

cap prog drop lifetime
prog def lifetime

	local depvar `1'
	log using "`1'_reg.log", replace
/*
		reg `depvar' i.col_g
		reg `depvar' i.abi_g
		reg `depvar' hh_4_g_r
		reg `depvar' ss_4_g_r
*/
		reg `depvar' i.col_g i.abi_g hh_4_g_r ss_4_g_r
		reg `depvar' i.col_k i.abi_k hh_5_k_r ss_5_k_r i.abi_g
/*
		reg `depvar' i.col_k
		reg `depvar' i.abi_k
		reg `depvar' hh_4_k_r
		reg `depvar' ss_4_k_r
		reg `depvar' i.col_k i.abi_k hh_4_k_r ss_4_k_r
*/

*--------------
* categorical fixed effects
*--------------
/*		reg `depvar' i.hgcat
		reg `depvar' i.sgcat
*/
		reg `depvar' i.col_g i.abi_g i.hgcat i.sgcat
		reg `depvar' i.col_k i.abi_k i.h5kcat i.s5kcat i.abi_g
/*
		reg `depvar' i.col_k
		reg `depvar' i.abi_k
		reg `depvar' i.hkcat
		reg `depvar' i.skcat
		reg `depvar' i.col_k i.abi_k i.hkcat i.skcat
*/

*--------------
* r-r ige
*--------------

	reg `depvar' lfkearn_r lfpearn_r
	reg `depvar' lfkwlth_r lfpwlth_r

	log close

end
*-------------------------------
preserve
replace lfgearn = log(lfgearn)
replace lfgwlth = log(lfgwlth)
lifetime lfgearn
lifetime lfgwlth
//lifetime lfkutil
restore

lifetime lfgearn_r
lifetime lfgwlth_r
//lifetime lfkutil_r

*-----------------------------------------------------------------------------
* regressions with hh_4_g
*-----------------------------------------------------------------------------

egen h1gcat = cut(hh_1_g_r), at(0,33.33333334,66.66666667,100.00000001)
egen h2gcat = cut(hh_2_g_r), at(0,33.33333334,66.66666667,100.00000001)
egen h3gcat = cut(hh_3_g_r), at(0,33.33333334,66.66666667,100.00000001)
replace h1gcat = int(h1gcat)/33+1
replace h2gcat = int(h2gcat)/33+1
replace h3gcat = int(h3gcat)/33+1

egen lfkecat = cut(lfkearn_r), at(0,33.33333334,66.66666667,100.00000001)
egen lfkwcat = cut(lfkwlth_r), at(0,33.33333334,66.66666667,100.00000001)
replace lfkecat = int(lfkecat)/33+1
replace lfkwcat = int(lfkwcat)/33+1

egen lfpecat = cut(lfpearn_r), at(0,33.33333334,66.66666667,100.00000001)
egen lfpwcat = cut(lfpwlth_r), at(0,33.33333334,66.66666667,100.00000001)
replace lfpecat = int(lfpecat)/33+1
replace lfpwcat = int(lfpwcat)/33+1

cap prog drop hh4g
prog def hh4g

	local depvar `1'
	log using "`1'_reg.log", replace

		reg `depvar' hh_3_g_r
		reg `depvar' hh_2_g_r
		reg `depvar' hh_1_g_r
/*
		reg `depvar' i.h3gcat
		reg `depvar' i.h2gcat
		reg `depvar' i.h1gcat

		reg `depvar' i.col_k
		reg `depvar' i.abi_k
		reg `depvar' hh_5_k_r
		reg `depvar' ss_5_k_r
		reg `depvar' i.abi_g
*/
		reg `depvar' i.col_k i.abi_k hh_5_k_r ss_5_k_r i.abi_g
/*
		reg `depvar' i.h5kcat
		reg `depvar' i.s5kcat
*/
		reg `depvar' i.col_k i.abi_k i.h5kcat i.s5kcat i.abi_g

* now just resources and abilities

		reg `depvar' lfkearn_r
		reg `depvar' lfkwlth_r
//		reg `depvar' i.abi_g lfkearn_r lfkwlth_r

		reg `depvar' i.lfkecat
		reg `depvar' i.lfkwcat
//		reg `depvar' i.abi_g i.lfkecat i.lfkwcat

/*
		reg `depvar' i.abi_g i.abi_k lfkearn_r lfkwlth_r
		reg `depvar' i.abi_g i.abi_k i.lfkecat i.lfkwcat

		reg `depvar' i.abi_g lfkearn_r lfkwlth_r lfpearn_r lfpwlth_r
		reg `depvar' i.abi_g i.lfkecat i.lfkwcat i.lfpecat i.lfpwcat
*/

* now parent states and grandparents

		reg `depvar' lfkearn_r lfpearn_r
		reg `depvar' lfkwlth_r lfpwlth_r

		reg `depvar' i.lfkecat i.lfpecat
		reg `depvar' i.lfkwcat i.lfpwcat

	log close
end
*-------------------------------
//replace hh_4_g = log(hh_4_g)
//hh4g hh_4_g
hh4g hh_4_g_r
hh4g ss_4_g_r

*-----------------------------------------------------------------------------
* fraction of inter-vivos by ability differences
*-----------------------------------------------------------------------------
scalar RR = 1/(1.04)^(6*5)
preserve
	g ivfrac = ss_4_g*RR/lfkwlth
	g lffrac = lfgearn/lfkearn
	g time = (ll_0+ll_1+ll_2)/3
	g inith = hh_1_g

	collapse ss_4_g lfkwlth lfgearn lfkearn ivfrac time inith, by(abi_g abi_k)
	replace ss_4_g = ss_4_g*RR/lfkwlth
	replace lfgearn = lfgearn/lfkearn
	drop lfkearn lfkwlth

	log using "abi_rel.log", replace
	list
	log close
restore
